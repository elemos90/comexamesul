<?php
/**
 * Script de Verifica√ß√£o Pr√©-Deploy
 * Verifica se o sistema est√° pronto para produ√ß√£o
 * 
 * Executar: php scripts/pre_deploy_check.php
 */

declare(strict_types=1);

echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
echo "‚ïë  PR√â-DEPLOY CHECK - admissao.cycode.net                   ‚ïë\n";
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";

$errors = [];
$warnings = [];
$passed = 0;
$total = 0;

function check(string $name, bool $condition, string $errorMsg = '', bool $critical = true): void
{
    global $errors, $warnings, $passed, $total;
    $total++;
    
    if ($condition) {
        echo "‚úÖ {$name}\n";
        $passed++;
    } else {
        if ($critical) {
            echo "‚ùå {$name}\n";
            if ($errorMsg) $errors[] = $errorMsg;
        } else {
            echo "‚ö†Ô∏è  {$name}\n";
            if ($errorMsg) $warnings[] = $errorMsg;
        }
    }
}

// ============================================
// 1. VERIFICA√á√ïES DE PHP
// ============================================
echo "üìå Verifica√ß√µes de PHP\n";
echo str_repeat('‚îÄ', 60) . "\n";

check(
    'PHP 8.1+',
    version_compare(PHP_VERSION, '8.1.0', '>='),
    'PHP 8.1+ √© obrigat√≥rio. Vers√£o atual: ' . PHP_VERSION
);

check(
    'Extens√£o PDO MySQL',
    extension_loaded('pdo_mysql'),
    'Extens√£o pdo_mysql n√£o instalada'
);

check(
    'Extens√£o MBString',
    extension_loaded('mbstring'),
    'Extens√£o mbstring n√£o instalada'
);

check(
    'Extens√£o JSON',
    extension_loaded('json'),
    'Extens√£o json n√£o instalada'
);

check(
    'Extens√£o FileInfo',
    extension_loaded('fileinfo'),
    'Extens√£o fileinfo n√£o instalada'
);

echo "\n";

// ============================================
// 2. VERIFICA√á√ïES DE ARQUIVOS
// ============================================
echo "üìÅ Verifica√ß√µes de Arquivos\n";
echo str_repeat('‚îÄ', 60) . "\n";

check(
    'Arquivo bootstrap.php existe',
    file_exists(__DIR__ . '/../bootstrap.php'),
    'bootstrap.php n√£o encontrado'
);

check(
    'Arquivo composer.json existe',
    file_exists(__DIR__ . '/../composer.json'),
    'composer.json n√£o encontrado'
);

check(
    'Pasta vendor/ existe',
    is_dir(__DIR__ . '/../vendor'),
    'Pasta vendor/ n√£o encontrada. Execute: composer install',
    false
);

check(
    'Arquivo .env.example existe',
    file_exists(__DIR__ . '/../.env.example'),
    '.env.example n√£o encontrado'
);

check(
    'Arquivo public/index.php existe',
    file_exists(__DIR__ . '/../public/index.php'),
    'public/index.php n√£o encontrado'
);

check(
    'Arquivo public/.htaccess existe',
    file_exists(__DIR__ . '/../public/.htaccess'),
    'public/.htaccess n√£o encontrado'
);

echo "\n";

// ============================================
// 3. VERIFICA√á√ïES DE DIRET√ìRIOS
// ============================================
echo "üìÇ Verifica√ß√µes de Diret√≥rios\n";
echo str_repeat('‚îÄ', 60) . "\n";

$writableDirs = [
    'storage/logs',
    'storage/cache',
    'public/uploads',
    'public/uploads/avatars'
];

foreach ($writableDirs as $dir) {
    $path = __DIR__ . '/../' . $dir;
    
    if (!is_dir($path)) {
        @mkdir($path, 0775, true);
    }
    
    check(
        "Pasta {$dir}/ existe",
        is_dir($path),
        "Pasta {$dir}/ n√£o encontrada"
    );
    
    check(
        "Pasta {$dir}/ √© grav√°vel",
        is_writable($path),
        "Pasta {$dir}/ n√£o tem permiss√£o de escrita. Execute: chmod 775 {$dir}",
        false
    );
}

echo "\n";

// ============================================
// 4. VERIFICA√á√ïES DE DEPEND√äNCIAS
// ============================================
echo "üì¶ Verifica√ß√µes de Depend√™ncias Composer\n";
echo str_repeat('‚îÄ', 60) . "\n";

if (file_exists(__DIR__ . '/../vendor/autoload.php')) {
    require_once __DIR__ . '/../vendor/autoload.php';
    
    check(
        'Dompdf instalado',
        class_exists('Dompdf\Dompdf'),
        'Dompdf n√£o instalado. Execute: composer require dompdf/dompdf',
        false
    );
    
    check(
        'PHPSpreadsheet instalado',
        class_exists('PhpOffice\PhpSpreadsheet\Spreadsheet'),
        'PHPSpreadsheet n√£o instalado. Execute: composer require phpoffice/phpspreadsheet',
        false
    );
    
    check(
        'PHPMailer instalado',
        class_exists('PHPMailer\PHPMailer\PHPMailer'),
        'PHPMailer n√£o instalado. Execute: composer require phpmailer/phpmailer',
        false
    );
} else {
    echo "‚ö†Ô∏è  Vendor n√£o encontrado - pulando verifica√ß√µes de depend√™ncias\n\n";
}

echo "\n";

// ============================================
// 5. VERIFICA√á√ïES DE SEGURAN√áA
// ============================================
echo "üîí Verifica√ß√µes de Seguran√ßa\n";
echo str_repeat('‚îÄ', 60) . "\n";

check(
    'Arquivo .env N√ÉO existe (deve ser criado no servidor)',
    !file_exists(__DIR__ . '/../.env'),
    '.env detectado. Remova antes de fazer upload (use .env.example)',
    false
);

check(
    '.gitignore protege .env',
    strpos(file_get_contents(__DIR__ . '/../.gitignore'), '.env') !== false,
    '.env n√£o est√° no .gitignore'
);

check(
    '.gitignore protege vendor/',
    strpos(file_get_contents(__DIR__ . '/../.gitignore'), '/vendor/') !== false,
    'vendor/ n√£o est√° no .gitignore',
    false
);

// Verificar arquivos de teste
$testFiles = glob(__DIR__ . '/../public/test_*.php');
$testFiles = array_merge($testFiles, glob(__DIR__ . '/../public/debug_*.php'));

check(
    'Nenhum arquivo de teste em public/',
    count($testFiles) === 0,
    'Arquivos de teste encontrados: ' . implode(', ', array_map('basename', $testFiles)),
    false
);

echo "\n";

// ============================================
// 6. VERIFICA√á√ïES DE MIGRATIONS
// ============================================
echo "üóÑÔ∏è  Verifica√ß√µes de Migrations SQL\n";
echo str_repeat('‚îÄ', 60) . "\n";

$requiredMigrations = [
    'migrations.sql',
    'migrations_master_data_simple.sql',
    'migrations_auto_allocation.sql',
    'migrations_triggers.sql',
    'performance_indexes.sql'
];

foreach ($requiredMigrations as $migration) {
    check(
        "Migration {$migration} existe",
        file_exists(__DIR__ . '/../app/Database/' . $migration),
        "Migration {$migration} n√£o encontrada",
        false
    );
}

echo "\n";

// ============================================
// RESUMO FINAL
// ============================================
echo str_repeat('‚ïê', 60) . "\n";
echo "üìä RESUMO\n";
echo str_repeat('‚ïê', 60) . "\n\n";

echo "Testes passados: {$passed}/{$total}\n";
echo "Taxa de sucesso: " . round(($passed / $total) * 100, 1) . "%\n\n";

if (count($errors) > 0) {
    echo "‚ùå ERROS CR√çTICOS (" . count($errors) . "):\n";
    foreach ($errors as $i => $error) {
        echo "   " . ($i + 1) . ". {$error}\n";
    }
    echo "\n";
}

if (count($warnings) > 0) {
    echo "‚ö†Ô∏è  AVISOS (" . count($warnings) . "):\n";
    foreach ($warnings as $i => $warning) {
        echo "   " . ($i + 1) . ". {$warning}\n";
    }
    echo "\n";
}

// Status final
if (count($errors) === 0 && $passed >= ($total * 0.8)) {
    echo "‚úÖ SISTEMA PRONTO PARA DEPLOY!\n\n";
    echo "Pr√≥ximos passos:\n";
    echo "1. Fazer upload para: /home/cycodene/admissao.cycode.net/\n";
    echo "2. Criar .env no servidor (use env.production.example)\n";
    echo "3. Executar: composer install --no-dev --optimize-autoloader\n";
    echo "4. Importar migrations SQL no phpMyAdmin\n";
    echo "5. Configurar SSL/HTTPS via cPanel\n";
    echo "6. Acessar: https://admissao.cycode.net\n\n";
    exit(0);
} elseif (count($errors) === 0) {
    echo "‚ö†Ô∏è  SISTEMA QUASE PRONTO\n";
    echo "Corrija os avisos antes de fazer deploy.\n\n";
    exit(1);
} else {
    echo "‚ùå SISTEMA N√ÉO EST√Å PRONTO\n";
    echo "Corrija os erros cr√≠ticos antes de fazer deploy.\n\n";
    exit(2);
}
